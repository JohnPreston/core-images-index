// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package index

import (
	"sync"
)

// Ensure, that AWSIndexFetchMock does implement AWSIndexFetch.
// If this is not the case, regenerate this file with moq.
var _ AWSIndexFetch = &AWSIndexFetchMock{}

// AWSIndexFetchMock is a mock implementation of AWSIndexFetch.
//
// 	func TestSomethingThatUsesAWSIndexFetch(t *testing.T) {
//
// 		// make and configure a mocked AWSIndexFetch
// 		mockedAWSIndexFetch := &AWSIndexFetchMock{
// 			GetImagesFunc: func() (AWSImages, error) {
// 				panic("mock out the GetImages method")
// 			},
// 		}
//
// 		// use mockedAWSIndexFetch in code that requires AWSIndexFetch
// 		// and then make assertions.
//
// 	}
type AWSIndexFetchMock struct {
	// GetImagesFunc mocks the GetImages method.
	GetImagesFunc func() (AWSImages, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetImages holds details about calls to the GetImages method.
		GetImages []struct {
		}
	}
	lockGetImages sync.RWMutex
}

// GetImages calls GetImagesFunc.
func (mock *AWSIndexFetchMock) GetImages() (AWSImages, error) {
	if mock.GetImagesFunc == nil {
		panic("AWSIndexFetchMock.GetImagesFunc: method is nil but AWSIndexFetch.GetImages was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetImages.Lock()
	mock.calls.GetImages = append(mock.calls.GetImages, callInfo)
	mock.lockGetImages.Unlock()
	return mock.GetImagesFunc()
}

// GetImagesCalls gets all the calls that were made to GetImages.
// Check the length with:
//     len(mockedAWSIndexFetch.GetImagesCalls())
func (mock *AWSIndexFetchMock) GetImagesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetImages.RLock()
	calls = mock.calls.GetImages
	mock.lockGetImages.RUnlock()
	return calls
}

// Ensure, that AWSIndexMock does implement AWSIndex.
// If this is not the case, regenerate this file with moq.
var _ AWSIndex = &AWSIndexMock{}

// AWSIndexMock is a mock implementation of AWSIndex.
//
// 	func TestSomethingThatUsesAWSIndex(t *testing.T) {
//
// 		// make and configure a mocked AWSIndex
// 		mockedAWSIndex := &AWSIndexMock{
// 			MatchFunc: func(version string) (string, error) {
// 				panic("mock out the Match method")
// 			},
// 		}
//
// 		// use mockedAWSIndex in code that requires AWSIndex
// 		// and then make assertions.
//
// 	}
type AWSIndexMock struct {
	// MatchFunc mocks the Match method.
	MatchFunc func(version string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Match holds details about calls to the Match method.
		Match []struct {
			// Version is the version argument value.
			Version string
		}
	}
	lockMatch sync.RWMutex
}

// Match calls MatchFunc.
func (mock *AWSIndexMock) Match(version string) (string, error) {
	if mock.MatchFunc == nil {
		panic("AWSIndexMock.MatchFunc: method is nil but AWSIndex.Match was just called")
	}
	callInfo := struct {
		Version string
	}{
		Version: version,
	}
	mock.lockMatch.Lock()
	mock.calls.Match = append(mock.calls.Match, callInfo)
	mock.lockMatch.Unlock()
	return mock.MatchFunc(version)
}

// MatchCalls gets all the calls that were made to Match.
// Check the length with:
//     len(mockedAWSIndex.MatchCalls())
func (mock *AWSIndexMock) MatchCalls() []struct {
	Version string
} {
	var calls []struct {
		Version string
	}
	mock.lockMatch.RLock()
	calls = mock.calls.Match
	mock.lockMatch.RUnlock()
	return calls
}
